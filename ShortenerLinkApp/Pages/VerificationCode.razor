@page "/verification"
@using System.Timers
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject OTPSharedDataService SharedDataService
@inject ISnackbarService SnackbarService
@layout EmptyLayout;
<PageTitle>Verification Code</PageTitle>
<link href="/css/otp.css" rel="stylesheet" />

<section class="vh-100">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col col-xl-10">
                <div class="card shadow p-3 mb-5 bg-white card-rounded">
                    <div class="row g-0">
                        <div class="col-md-8 col-lg-6 d-none d-md-block">
                            <img src="/images/login.jpg"
                                 alt="login form" class="img-fluid" style="border-radius: 1rem 0 0 1rem;" />
                        </div>
                        <div class="col-md-4 col-lg-6 d-flex align-items-center">
                            <div class="card-body p-4 p-lg-5 text-black">

                                <EditForm Model="OTPViewModel" OnSubmit="SubmitOTP">
                                    <DataAnnotationsValidator />

                                    <div class="row justify-content-center">
                                        <div class="col-12 col-md-6 col-lg-4" style="min-width: 500px;">
                                            <div class="card bg-white mb-5 mt-5 border-0" style="box-shadow: 0 12px 15px rgba(0, 0, 0, 0.02);">
                                                <div class="card-body p-5 text-center">
                                                    <h4>Verify</h4>
                                                    <p>Your code was sent to you via SMS</p>

                                                    <div class="otp-field mb-4">
                                                        <input type="number" @bind="@otp1" />
                                                        <input type="number" disabled @bind="@otp2" />
                                                        <input type="number" disabled @bind="@otp3" />
                                                        <input type="number" disabled @bind="@otp4" />
                                                        <input type="number" disabled @bind="@otp5" />
                                                    </div>

                                                    <MudButton Disabled="@_processing" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mb-3" id="btnVerify">
                                                        @if (_processing)
                                                        {
                                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                                            <MudText Class="ms-2">Waiting...</MudText>
                                                        }
                                                        else
                                                        {
                                                            <MudText>Verify</MudText>
                                                        }
                                                    </MudButton>



                                                    <p>OTP expires in: <strong class="text-danger" id="timer">@_timeRemaining</strong> seconds</p>
                                                    <p class="resend text-muted mb-0">
                                                        Didn't receive code? <button @onclick="ResendOTP" type="button" disabled="@_isResendDisabled" class="btn btn-outline-success" style="border:0">Resend</button>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </EditForm>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="/js/otp.js"></script>

@code {
    private string otp1, otp2, otp3, otp4, otp5;
    private bool _processing = false;
    private int _timeoutDuration = 60; // timeout duration in seconds
    private int _timeRemaining;
    private bool _isResendDisabled = false;
    private System.Timers.Timer _timer;
    private string FullOTP => $"{otp1}{otp2}{otp3}{otp4}{otp5}";
    private OTPViewModel OTPViewModel = new OTPViewModel();


    protected override void OnInitialized()
    {
        _isResendDisabled = true;
        _timeRemaining = _timeoutDuration;
        StartTimer();
    }
    private async Task SubmitOTP()
    {
        _processing = true;
        var apiUrl = $"{Const.ApiBaseUrl}/authenticate/Verify";
        var model = new OTPViewModel()
            {
                Mobile = SharedDataService.MobileNumber,
                Code = FullOTP
            };
        var response = await Http.PostAsJsonAsync(apiUrl, model);

        Console.WriteLine(response.Content.ReadAsStringAsync().Result);
        _processing = false;
        if (response.IsSuccessStatusCode)
        {
            var loginResponse = JsonSerializer.Deserialize<LoginResponse>(response.Content.ReadAsStringAsync().Result);
            SnackbarService.Add("Login successfully.", Severity.Success);
            model = new OTPViewModel(); // Reset the form
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var loginResponse = JsonSerializer.Deserialize<ApiResponseViewModel>(response.Content.ReadAsStringAsync().Result);
            SnackbarService.Add(loginResponse.message, Severity.Error);
        }
    }

    private async Task ResendOTP()
    {
        _processing = true;
        var apiUrl = $"{Const.ApiBaseUrl}/authenticate/signIn";

        var model = new LoginViewModel()
            {
                Mobile = SharedDataService.MobileNumber
            };
        var response = await Http.PostAsJsonAsync(apiUrl, model);
        Console.WriteLine(response.Content.ReadAsStringAsync().Result);

        _processing = false;
        if (response.IsSuccessStatusCode)
        {
            _isResendDisabled = true;
            _timeRemaining = _timeoutDuration;
            StartTimer();
            SnackbarService.Add($"The security code again successfully sent to you.", Severity.Success);
            model = new LoginViewModel(); // Reset the form
        }
        else
        {
            SnackbarService.Add("An error has occurred.", Severity.Error);
        }
    }

    private void StartTimer()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += UpdateCountdown;
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private void UpdateCountdown(object sender, ElapsedEventArgs e)
    {
        if (_timeRemaining > 0)
        {
            _timeRemaining--;
        }
        else
        {
            StopTimer();
        }

        InvokeAsync(StateHasChanged);
    }

    private void StopTimer()
    {
        _timer.Stop();
        _timer.Dispose();
        _isResendDisabled = false;
    }

    public void Dispose()
    {
        StopTimer();
    }




}