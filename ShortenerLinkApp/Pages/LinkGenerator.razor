@page "/linkGenerator"
@inject HttpClient Http
@inject ISnackbarService SnackbarService
@inject ILocalStorageService LocalStorage;
@inject IJSRuntime JSRuntime
@layout EmptyLayout;
<PageTitle>LinkGenerator</PageTitle>


<section class="vh-100">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col col-xl-10">
                <div class="card shadow p-3 mb-5 bg-white card-rounded">
                    <div class="row g-0">
                        <div class="col-md-8 col-lg-6 d-none d-md-block">
                            <img src="/images/login-1.jpg"
                                 alt="login form" class="img-fluid" style="border-radius: 1rem 0 0 1rem;" />
                        </div>
                        <div class="col-md-4 col-lg-6 d-flex align-items-center">
                            <div class="card-body p-4 p-lg-5 text-black">


                                <EditForm Model="model" OnValidSubmit="GenerateLink">
                                    <DataAnnotationsValidator />
                                    <h5 class="fw-normal mb-3 pb-3" style="letter-spacing: 1px;">Shortener link</h5>
                                    <div class="form-outline mb-4">
                                        <InputText id="Url" @bind-Value="model.Url" class="form-control" placeholder="Enter your link" />
                                        <ValidationMessage For="@(() => model.Url)" />
                                    </div>
                                    <div class="pt-1 mb-4">
                                        <MudButton Disabled="@_processing" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
                                            @if (_processing)
                                            {
                                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                                <MudText Class="ms-2">Waiting...</MudText>
                                            }
                                            else
                                            {
                                                <MudText>Generate</MudText>
                                            }
                                        </MudButton>
                                    </div>
                                </EditForm>

                                @if (!string.IsNullOrEmpty(linkToCopy))
                                {
                                    <p>
                                        <strong>@linkToCopy</strong>
                                    </p>

                                    <MudButton @onclick="CopyToClipboard" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CopyAll" IconColor="Color.Secondary" Size="Size.Large">Copy</MudButton>
                                }

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    async function copyTextToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            console.log("Copied: " + text);
            return true;
        } catch (err) {
            console.error("Could not copy text: ", err);
            return false;
        }
    }
</script>


@code {

    private ShortLinkRequestViewModel model = new ShortLinkRequestViewModel();
    private bool _processing = false;
    private string linkToCopy = "";

    private async Task GenerateLink()
    {
        _processing = true;
        var apiUrl = $"{Const.ApiBaseUrl}/shortLink/createShortLink";

        var token = await LocalStorage.GetItemAsStringAsync("token");
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await Http.PostAsJsonAsync(apiUrl, model);
        Console.WriteLine(response.Content.ReadAsStringAsync().Result);
        _processing = false;
        if (response.IsSuccessStatusCode)
        {
            var shortLinkResponse = JsonSerializer.Deserialize<ShortLinkResponseViewModel>(response.Content.ReadAsStringAsync().Result);
            SnackbarService.Add(shortLinkResponse.message, Severity.Success);
          
            linkToCopy = shortLinkResponse.url;
            model = new ShortLinkRequestViewModel(); // Reset the form
        }
        else
        {

            var shortLinkResponse = JsonSerializer.Deserialize<ApiResponseViewModel>(response.Content.ReadAsStringAsync().Result);
            SnackbarService.Add(shortLinkResponse.message, Severity.Error);
        }
    }



    private async Task CopyToClipboard()
    {
        bool success = await JSRuntime.InvokeAsync<bool>("copyTextToClipboard", linkToCopy);

        if (success)
        {
            SnackbarService.Add($"Link copied to clipboard!", Severity.Success);
        }
        else
        {
            SnackbarService.Add($"Failed to copy link!", Severity.Warning);
        }
    }
}